import java.io.*;
//import java.lang.reflect.Array;
import java.util.*;

/**
 * PsalmsReaderMain class - Template for Assignment-5
 * 
 * @author TMyatt
 *
 */
public class Assignment5_Binary {
	static String words[] = new String[12600];
	static int count[] = new int[12600];
	static int lastIndex = 0;
	static long compareStringCount = 0;
	static long moveStringCount = 0;

	/**
	 * addWordToList - add word to list or increment counter
	 * 
	 * @param inWord - the word to add to the list
	 * @return number of words in the list
	 */
	static int addWordToList(String inWord) {
		boolean foundWord = false;

		// Search for word, set boolean and increment count if found
		int low = 0;
		int mid = lastIndex / 2;
		int high = lastIndex - 1;

		// Loop until "low" passes "high"
		while (high >= low) {
			// Calculate the middle index
			mid = (high + low) / 2;

			// Cut the range to either the left or right half,
			// unless numbers[mid] is the key

			int compare = words[mid].compareTo(inWord);
			compareStringCount++;

			if (compare < 0) {
				low = mid + 1;
				// compareStringCount++;

			} else if (compare > 0) {
				// compareStringCount++;
				high = mid - 1;
			} else {
				foundWord = true;
				count[mid]++;
				break;
			}
		}
		// If word not found in the loop above, add it to list bottom
		if (!foundWord) {
			moveStringCount++;
			words[lastIndex] = String.valueOf(inWord);
			count[lastIndex] = 1;
			lastIndex += 1;
			for (int i = 1; i < lastIndex; i++) {
				int j = i;
				while (j > 0 && words[j].compareTo(words[j - 1]) < 0) {
					compareStringCount++;
					moveStringCount++;
					// Swap numbers[j] and numbers [j - 1]
					String temp = words[j];
					words[j] = words[j - 1];
					words[j - 1] = temp;

					int tempCount = count[j];
					count[j] = count[j - 1];
					count[j - 1] = tempCount;

					j--;

				} // end of while loop
			} // end of for loop

		} // end of if loop
		return lastIndex;

	} // end of addWordToList

	/**
	 * addWordToSortedList - add word to sorted list or increment counter
	 * 
	 * @param inWord - the word to add to the list
	 * @return number of words in the list
	 */
	static int addWordToSortedList(String inWord) {
		boolean foundWord = false;
		// Search for word, set boolean and increment count if found

		int low = 0; // low mid and high are created
		int mid = lastIndex / 2;
		int high = lastIndex - 1;

		// Loop until "low" passes "high"
		while (high >= low) { // starts binary search
			// Calculate the middle index
			mid = (high + low) / 2;

			// Cut the range to either the left or right half,
			// unless numbers[mid] is the key

			int compare = words[mid].compareTo(inWord); // compares mid to inword
			compareStringCount++;

			if (compare < 0) { // sorts until mid is found
				low = mid + 1;
			} else if (compare > 0) {
				high = mid - 1;
			} else {
				foundWord = true;
				count[mid]++;
				break;
			}
		}

		// Search for word, set boolean and increment count if found
		// In Part #1 a linear search, in Part #2 a binary search
		// Be sure to count comparisons and moves

		// If word not found in the loop above, add it to sorted list
		if (!foundWord) {
			moveStringCount++;
			words[lastIndex] = String.valueOf(inWord);
			count[lastIndex] = 1;
			lastIndex += 1;
			for (int i = 1; i < lastIndex; i++) {
				int j = i;
				while (j > 0 && words[j].compareTo(words[j - 1]) < 0) {
					compareStringCount++;
					moveStringCount++;
					// Swap numbers[j] and numbers [j - 1]
					String temp = words[j];
					words[j] = words[j - 1];
					words[j - 1] = temp;

					int tempCount = count[j];
					count[j] = count[j - 1];
					count[j - 1] = tempCount;

					j--;

				} // end of while loop
			} // end of for loop

		} // end of if loop
		return lastIndex;
	} // end of addWordToSortedList

	/**
	 * printWordList - dump the list if count > inMinimum
	 */
	static void printWordList(int inMinimum) {
		System.out.println("\nTotal words: " + lastIndex);
		System.out.println("Compare count: " + compareStringCount);
		System.out.println("Move count: " + moveStringCount);
		for (int i = 0; i < lastIndex; i++) {
			if (count[i] >= inMinimum) {
				System.out.println(words[i] + ": " + count[i]);
			}
		}
	}

	/**
	 * getVerse - Parse and return only the Psalms verse
	 * 
	 * @param inLine - the line to parse on tab delimiter
	 * @return right half of tab delimited string
	 */
	static String getVerse(String inLine) {
		String[] ver = inLine.split("\t");
		return ver[1];
	}

	/**
	 * PsalmsReaderMain main() - Template for Assignment-5
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();

		try {
			// Open the required text file for sequential read
			// Scanner inputFile = new Scanner(new File("bible-complete.txt"));
			Scanner inputFile = new Scanner(new File("/Users/jesusguillen/Desktop/Java2023/Week 5/Part 1/bible-complete10.txt"));

			// Check for EOF, read the next line, and display it
			while (inputFile.hasNextLine()) {
				String inLine, verse;
				String[] verseParsed;

				inLine = inputFile.nextLine();
				verse = getVerse(inLine);
				verseParsed = verse.split("[ :;,.'!?()-]+");

				for (String s : verseParsed) {
					// addWordToList(s.toLowerCase());
					addWordToSortedList(s.toLowerCase());
				}
			}
			// Close the required file when EOF is reached
			inputFile.close();
			printWordList(90000);
			System.out.println(Arrays.toString(words));
			// System.out.println(Arrays.toString(count));

		} // END try

		catch (Exception e) {
			// All Exceptions come here for graceful termination
			System.out.println("PsalmsReaderMain Error: " + e);
		} // END catch
		long endTime = System.currentTimeMillis();
		long totalTime = endTime - startTime;
		long hours = totalTime / (60 * 60 * 1000);
		long minutes = (totalTime / (60 * 1000)) % 60;
		long seconds = (totalTime / 1000) % 60;
		long milliseconds = totalTime % 1000;

		System.out.printf("%02d:%02d:%02d.%03d", hours, minutes, seconds, milliseconds);
	} // END main
} // END class
